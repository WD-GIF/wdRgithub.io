rm(list=ls())
source("DownGSE.R")
gset<-DownGSE()
exprSet<-exprs(gset[[1]])
View(pd)
pd<-pData(gset[[1]])
library(stringr)
group_list=as.character( str_split(pd[,1],pattern=" ",simplify=T,n=4)[,1])
#数据库导入
library(illuminaHumanv2.db)
ids<-toTable(illuminaHumanv2SYMBOL)
View(ids)
#查看数据库中基因与探针的关系
tail(sort(table(ids$symbol)))#结果显示对应于HYDIN基因的探针数量最多达到了17个
table(sort(table(ids$symbol)))#结果显示只有一个探针与之对应的达15254个基因
#id转换
exprSet<-exprSet[rownames(exprSet) %in% ids$probe_id,]
dim(exprSet)
dat<-exprSet
ids<-ids[match(rownames(exprSet),ids$probe_id),]#这里一定要过滤ids
dim(ids)
ids$median<-apply(dat,1,median)
ids<-ids[order(ids$symbol,ids$median,decreasing=T),]
ids<-ids[!duplicated(ids$symbol),]
dat<-dat[ids$probe_id,]
rownames(dat)=ids$symbol
#对矩阵进行探索
library(reshape2)
library(ggplot2)
library(gpairs)
library(corrplot)
exprSet<-dat
exprSet_L<-melt(exprSet)#得到的矩阵第一列为基因是exprSet的行名，第二列是exprSet的列名，即样本名，第三列为表达值
colnames(exprSet_L)=c('probe','sample','value')
exprSet_L$group<-rep(group_list,each=nrow(dat))
head(exprSet_L)
p=ggplot(exprSet_L,aes(x=sample,y=value,fill=group))+geom_boxplot()
p=ggplot(exprSet_L,aes(x=sample,y=value,fill=group))+geom_violin()
p=ggplot(exprSet_L,aes(value,fill=group))+geom_histogram(bins=200)+facet_wrap(~sample,n=4)
p=ggplot(exprSet_L,aes(value,fill=group))+geom_density(bins=200)+facet_wrap(~sample,n=4)
#常见统计学指标
e_mean<-tail(sort(apply(exprSet, 1, mean)),30)
e_min<-tail(sort(apply(exprSet, 1, min)),30)
e_max<-tail(sort(apply(exprSet, 1, max)),30)
e_mad<-tail(sort(apply(exprSet, 1, mad)),30)
e_median<-tail(sort(apply(exprSet, 1, median)),30)
e_sd<-tail(sort(apply(exprSet, 1, sd)),30)
e_var<-tail(sort(apply(exprSet, 1, var)),30)
#取mad前50的值画热图
dat_top50<-dat[tail(sort(apply(exprSet, 1, mad)),50),]
choose_gene<-names(sort(apply(exprSet, 1, mad),decreasing=T))[1:50]
choose_matrix<-scale(exprSet[choose_gene,])#归一化
library(pheatmap)
pheatmap(choose_matrix)
heatmap(choose_matrix)
#取不同统计值指标的top30，做一下upset看重合率
g_all <- unique(c(names(e_mean),names(e_median),names(e_max),names(e_min),
names(e_sd),names(e_var),names(e_mad) ))
dat=data.frame(e_all=g_all,
e_mean=ifelse(g_all %in%  names(e_mean) ,1,0),
e_median=ifelse(g_all %in%  names(e_median) ,1,0),
e_max=ifelse(g_all %in%  names(e_max) ,1,0),
e_min=ifelse(g_all %in%  names(e_min) ,1,0),
e_sd=ifelse(g_all %in%  names(e_sd) ,1,0),
e_var=ifelse(g_all %in%  names(e_var) ,1,0),
e_mad=ifelse(g_all %in%  names(e_mad) ,1,0)
)
library(UpSetR)
upset(dat,nsets = 7)
#做一个聚类 注意样本必须在行
out.dist<-dist(t(exprSet))
out.hclust<-hclust(out.dist,methon="complete")
plot(out.hclust)
#PCA图
p
rm(list=ls())
source("DownGSE.R")
gset<-DownGSE()
exprSet<-exprs(gset[[1]])
View(pd)
pd<-pData(gset[[1]])
library(stringr)
group_list=as.character( str_split(pd[,1],pattern=" ",simplify=T,n=4)[,1])
#数据库导入
library(illuminaHumanv2.db)
ids<-toTable(illuminaHumanv2SYMBOL)
View(ids)
#查看数据库中基因与探针的关系
tail(sort(table(ids$symbol)))#结果显示对应于HYDIN基因的探针数量最多达到了17个
table(sort(table(ids$symbol)))#结果显示只有一个探针与之对应的达15254个基因
#id转换
exprSet<-exprSet[rownames(exprSet) %in% ids$probe_id,]
dim(exprSet)
dat<-exprSet
ids<-ids[match(rownames(exprSet),ids$probe_id),]#这里一定要过滤ids
dim(ids)
ids$median<-apply(dat,1,median)
ids<-ids[order(ids$symbol,ids$median,decreasing=T),]
ids<-ids[!duplicated(ids$symbol),]
dat<-dat[ids$probe_id,]
rownames(dat)=ids$symbol
#对矩阵进行探索
library(reshape2)
library(ggplot2)
library(gpairs)
library(corrplot)
exprSet<-dat
exprSet_L<-melt(exprSet)#得到的矩阵第一列为基因是exprSet的行名，第二列是exprSet的列名，即样本名，第三列为表达值
colnames(exprSet_L)=c('probe','sample','value')
exprSet_L$group<-rep(group_list,each=nrow(dat))
head(exprSet_L)
p=ggplot(exprSet_L,aes(x=sample,y=value,fill=group))+geom_boxplot()
p=ggplot(exprSet_L,aes(x=sample,y=value,fill=group))+geom_violin()
p=ggplot(exprSet_L,aes(value,fill=group))+geom_histogram(bins=200)+facet_wrap(~sample,n=4)
#p=ggplot(exprSet_L,aes(value,fill=group))+geom_histogram(bins=200)+facet_wrap(~sample,n=4)
#p=ggplot(exprSet_L,aes(value,fill=group))+geom_density(bins=200)+facet_wrap(~sample,n=4)
#常见统计学指标
e_mean<-tail(sort(apply(exprSet, 1, mean)),30)
e_min<-tail(sort(apply(exprSet, 1, min)),30)
e_max<-tail(sort(apply(exprSet, 1, max)),30)
e_mad<-tail(sort(apply(exprSet, 1, mad)),30)
e_median<-tail(sort(apply(exprSet, 1, median)),30)
e_sd<-tail(sort(apply(exprSet, 1, sd)),30)
e_var<-tail(sort(apply(exprSet, 1, var)),30)
e_var<-tail(sort(apply(exprSet, 1, var)),30)
#取mad前50的值画热图
dat_top50<-dat[tail(sort(apply(exprSet, 1, mad)),50),]
choose_gene<-names(sort(apply(exprSet, 1, mad),decreasing=T))[1:50]
choose_matrix<-scale(exprSet[choose_gene,])#归一化
library(pheatmap)
pheatmap(choose_matrix)
heatmap(choose_matrix)
#取不同统计值指标的top30，做一下upset看重合率
g_all <- unique(c(names(e_mean),names(e_median),names(e_max),names(e_min),
names(e_sd),names(e_var),names(e_mad) ))
dat=data.frame(e_all=g_all,
e_mean=ifelse(g_all %in%  names(e_mean) ,1,0),
e_median=ifelse(g_all %in%  names(e_median) ,1,0),
e_max=ifelse(g_all %in%  names(e_max) ,1,0),
e_min=ifelse(g_all %in%  names(e_min) ,1,0),
e_sd=ifelse(g_all %in%  names(e_sd) ,1,0),
e_var=ifelse(g_all %in%  names(e_var) ,1,0),
e_mad=ifelse(g_all %in%  names(e_mad) ,1,0)
)
library(UpSetR)
upset(dat,nsets = 7)
#做一个聚类 注意样本必须在行
out.dist<-dist(t(exprSet))
out.hclust<-hclust(out.dist,methon="complete")
plot(out.hclust)
out.hclust<-hclust(out.dist)
plot(out.hclust)
#PCA图
pc<-prcomp(t(exprSet),scale=T)
pcx<-data.frame(pc$x)
pcr<-cbind(sample=rownames(pcx),group_list,pcx)
pcx
str(pcr)
p=ggplot(pcr,aes(PC1,PC2))+geom_point(size=5,aes(color=group_list))+geom_text(aes(label=sample),hjust=0.1,vjust=0.3)
p
group_list=as.factor(group_list)
group1 = which(group_list == levels(group_list)[1])#见下图中progress.中所示
group2 = which(group_list == levels(group_list)[2])#见下图中stable中所示
dat1 = dat[, group1]#取出分组信息为progress.的表达矩阵
dat2 = dat[, group2]##取出分组信息为stable的表达矩阵
dat = cbind(dat1, dat2)#cbind：列数形同时，横向追加。rbind：行数相同时，纵向追加
pvals = apply(exprSet, 1, function(x){ #后面导致19题出现的问题是这个地方的exprSet在之前被我给换成rbind的dat了，也就是顺序是14个progress.（11、13、14、15、16、19...），然乎再全是stable。而此时分组信息group_list就是按照最初group_list中的12、13、14、15、16、16...。由于矩阵和分组信息不是匹配的，所以不该该exprSet为cbind后的dat。那么问题是，既然用exprSet，那么为什么要有dat = cbind(dat1, dat2)这步呢？这时目前唯一不理解的啦，但是如果不用这个exprSet（行为基因名，列为正常顺序的样本），后面第20题就会做出错误的图。
t.test(as.numeric(x)~group_list)$p.value
})
p.adj = p.adjust(pvals, method = "BH")
avg_1 = rowMeans(dat1)
avg_2 = rowMeans(dat2)
log2FC = avg_2-avg_1
DEG_t.test = cbind(avg_1, avg_2, log2FC, pvals, p.adj)
DEG_t.test=DEG_t.test[order(DEG_t.test[,4]),]
DEG_t.test=as.data.frame(DEG_t.test)
# 查看t检验结果表格，包含log2FC、pvals和p.adj等，通常认为t<0.05即有统计学意义
head(DEG_t.test)
#对表达矩阵和分组信息进行T检验
group_list=as.factor(group_list)
#对表达矩阵和分组信息进行T检验
group_list=as.factor(group_list)
group1 = which(group_list == levels(group_list)[1])#见下图中progress.中所示
group2 = which(group_list == levels(group_list)[2])#见下图中stable中所示
dat1 = dat[, group1]#取出分组信息为progress.的表达矩阵
group1 = which(group_list == levels(group_list)[1])#见下图中progress.中所示
group2 = which(group_list == levels(group_list)[2])#见下图中stable中所示
group3 = which(group_list == levels(group_list)[3])
group4 = which(group_list == levels(group_list)[4])
group5 = which(group_list == levels(group_list)[5])
dat1 = dat[, group1]#取出分组信息为progress.的表达矩阵
View(dat)
dat<-exprSet
dat1 = dat[, group1]#取出分组信息为progress.的表达矩阵
dat2 = dat[, group2]##取出分组信息为stable的表达矩阵
dat = cbind(dat1, dat2)#cbind：列数形同时，横向追加。rbind：行数相同时，纵向追加
pvals = apply(exprSet, 1, function(x){ #后面导致19题出现的问题是这个地方的exprSet在之前被我给换成rbind的dat了，也就是顺序是14个progress.（11、13、14、15、16、19...），然乎再全是stable。而此时分组信息group_list就是按照最初group_list中的12、13、14、15、16、16...。由于矩阵和分组信息不是匹配的，所以不该该exprSet为cbind后的dat。那么问题是，既然用exprSet，那么为什么要有dat = cbind(dat1, dat2)这步呢？这时目前唯一不理解的啦，但是如果不用这个exprSet（行为基因名，列为正常顺序的样本），后面第20题就会做出错误的图。
t.test(as.numeric(x)~group_list)$p.value
})
p.adj = p.adjust(pvals, method = "BH")
avg_1 = rowMeans(dat1)
pvals = apply(exprSet, 1, function(x){ #后面导致19题出现的问题是这个地方的exprSet在之前被我给换成rbind的dat了，也就是顺序是14个progress.（11、13、14、15、16、19...），然乎再全是stable。而此时分组信息group_list就是按照最初group_list中的12、13、14、15、16、16...。由于矩阵和分组信息不是匹配的，所以不该该exprSet为cbind后的dat。那么问题是，既然用exprSet，那么为什么要有dat = cbind(dat1, dat2)这步呢？这时目前唯一不理解的啦，但是如果不用这个exprSet（行为基因名，列为正常顺序的样本），后面第20题就会做出错误的图。
t.test(as.numeric(x)~group_list[1:2])$p.value
})
group_list[1:2]
group_list<-group_list[levels(group_list)[1,2],]
group_list<-group_list[levels(group_list)[1,2]]
group_list<-group_list[levels(group_list)[1:2]]
group_list
group_list=as.character( str_split(pd[,1],pattern=" ",simplify=T,n=4)[,1])
group_list[levels(group_list)[1:2]]
levels(group_list)[1:2]
levels(group_list)[1]
group_list
group_list=as.factor(group_list)
levels(group_list)[1]
levels(group_list)[1:2]
group_list<-group_list[levels(group_list)[1:2]]
group_list
group_list=as.character( str_split(pd[,1],pattern=" ",simplify=T,n=4)[,1])
group_list<-group_list[group_list %in% levels(group_list)[1:2]]
group_list
load(system.file("extdata/eset.Rdata", package = "Bioc2018Anno"))
load(system.file("extdata/eset.Rdata", package = "arrays"))
load(system.file("extdata", package = "arrays"))
load(system.file("extdata/eset", package = "arrays"))
list.files(getwd(),"arrays/extdata")
list.files("arrays/extdata")
load(system.file("extdata/pdata.txt", package = "arrays"))
load(system.file("extdata", package = "arrays"))
apath<-system.file("extdata", package = "arrays")
apath
list.files(apath,full.names = T)
basename(list.files(apath,full.names = T))
library(affy)
library(arrays)
source("DownGSE.R")
e<-DownGSE()
eset<-exprs(e[[1]])
eset
eset<-DownGSE()
eset
BiocManager::install('GenomicDataCommons'，ask=F)
BiocManager::install('GenomicDataCommons',ask=F)
BiocManager::install('GenomicDataCommons',ask=F)
BiocManager::install('GenomicDataCommons',ask=F)
x<-matrix(1:8,2:9)
x<-as.data.frame(x)
x
summary(x)
boxplot(x.V1)
boxplot(x$V1)
plot(ecdf(x$V1)
)
set.seed(90)
x <- rbinom(15,8,0.7)
y <- rexp(15,0.5)
shapiro.test(x)
x
y
shapiro.test(y)
z<-rnorm(50)
qqblot(z)
qqplot(z)
qqnorm(z)
ggplot2:;qplot(z)
ggplot2::qplot(z)
ablines(z)
abline(z)
attach(cars)
cor(cars,method="pearson")
plot(cars)
ggplot(cars, aes(x=speed, y=dist))+ geom_point()
library(ggplot2)
ggplot(cars, aes(x=speed, y=dist))+ geom_point()
ggscatter(cars,x="speed", y="dist",add = "reg.line", conf.int = T,cor.coef = T)
library(ggpubr)
ggscatter(cars,x="speed", y="dist",add = "reg.line", conf.int = T,cor.coef = T)
cor.test(cars$speed,cars$dist,alternative = "two.side", method = "pearson")
getwd()
rm(list=ls())
a=read.table(choose.files(),sep="\t",stringsAsFactors = F,fill=T)
View(a)
list.files("GSE42")
list.files("42")
list.files(pattern = "42")
c<-list.files(pattern = "42")
file.remove(c)
downGSE<-function(studyID="GSE42872",destdir="."){
library(GEOquery)
if(file.exists(paste(studyID,"gset_Rdata")))
{
gset<-getGEO(studyID=studyID,destdir=destdir,getGPL=F,AnnotGPL=F)
save(eset,paste(studyID,"_gset_Rdata"))
}
}
downGSE()
downGSE()
load("GSE42872_gset_Rdata")
downGSE<-function(studyID="GSE42872",destdir="."){
library(GEOquery)
if(file.exists(paste(studyID,"gset_Rdata")))
{
gset<-getGEO(studyID=studyID,destdir=destdir,getGPL=F,AnnotGPL=F)
save(gset,paste(studyID,"_gset_Rdata"))
}
}
downGSE()
load("GSE42872_gset_Rdata")
downGSE("GSE42872")
load("GSE42872_gset_Rdata")
#GEO数据库挖掘
#数据下载
downGSE<-function(studyID="GSE42872",destdir="."){
library(GEOquery)
if(!file.exists(paste(studyID,"_gset_Rdata")))
{
gset<-getGEO(studyID=studyID,destdir=destdir,getGPL=F,AnnotGPL=F)
save(gset,paste(studyID,"_gset_Rdata"))
}
}
downGSE("GSE42872")
#GEO数据库挖掘
#数据下载
downGSE<-function(studyID="GSE42872",destdir="."){
library(GEOquery)
if(!file.exists(paste(studyID,"_gset_Rdata")))
{
gset<-getGEO(studyID,destdir=destdir,getGPL=F,AnnotGPL=F)
save(gset,paste(studyID,"_gset_Rdata"))
}
}
downGSE("GSE42872")
paste("GSE75","_gset_Rdata")
paste0("GSE75","_gset_Rdata")
#GEO数据库挖掘
#数据下载
downGSE<-function(studyID="GSE42872",destdir="."){
library(GEOquery)
if(!file.exists(paste0(studyID,"_gset_Rdata")))
{
gset<-getGEO(studyID,destdir=destdir,getGPL=F,AnnotGPL=F)
save(gset,past0(studyID,"_gset_Rdata"))
}
}
downGSE("GSE42872")
#GEO数据库挖掘
#数据下载
downGSE<-function(studyID="GSE42872",destdir="."){
library(GEOquery)
if(!file.exists(paste0(studyID,"_gset_Rdata")))
{
gset<-getGEO(studyID,destdir=destdir,getGPL=F,AnnotGPL=F)
save(gset,paste0(studyID,"_gset_Rdata"))
}
}
downGSE("GSE42872")
c<-list.files(pattern = "42")
file.remove(c)
#GEO数据库挖掘
#数据下载
downGSE<-function(studyID="GSE42872",destdir="."){
library(GEOquery)
if(!file.exists(paste0(studyID,"_gset_Rdata")))
{
gset<-getGEO(studyID,destdir=destdir,getGPL=F,AnnotGPL=F)
save(gset,paste0(studyID,"_gset_Rdata"))
}
}
downGSE("GSE42872")
c<-list.files(pattern = "42")
downGSE("GSE42872")
c<-list.files(pattern = "42")
file.remove(c)
#GEO数据库挖掘
#数据下载
downGSE<-function(studyID="GSE42872",destdir="."){
library(GEOquery)
if(!file.exists(paste0(studyID,"_gset.Rdata")))
{
gset<-getGEO(studyID,destdir=destdir,getGPL=F,AnnotGPL=F)
save(gset,paste0(studyID,"_gset..Rdata"))
}
}
downGSE("GSE42872")
c<-list.files(pattern = "42")
file.remove(c)
#GEO数据库挖掘
#数据下载
downGSE<-function(studyID="GSE42872",destdir="."){
library(GEOquery)
if(!file.exists(paste0(studyID,"_gset.Rdata")))
{
gset<-getGEO(studyID,destdir=destdir,getGPL=F,AnnotGPL=F)
save(gset,paste0(studyID,"_gset.Rdata"))
}
}
downGSE("GSE42872")
c<-list.files(pattern = "42")
file.remove(c)
#GEO数据库挖掘
#数据下载
DownGSE<-function(studyID="GSE13507",destdir=".")
{
if (! file.exists(paste0(studyID,"_gset.RData")))
{
library(GEOquery)
gset<-getGEO(studyID,destdir = destdir,getGPL = F,AnnotGPL = F)
exprSet<-exprs(gset[[1]])
pd<-pData(gset[[1]])
write.csv(exprSet,paste0(studyID,"_exprSet.RData"))
write.csv(pd,paste0(studyID,"_metadata.RData"))
save(gset,file=paste0(studyID,"_gset.RData"))
}else
{
load(paste0(studyID,"_gset.RData"))
}
return(gset)
}
downGSE("GSE42872")
paste0('studyID',"_gset.RData")
c<-list.files(pattern = "42")
c
DownGSE("GSE42872")
edit(downGSE)
fix(downGSE)
c<-list.files(pattern = "42")
file.remove(c)
downGSE("GSE42872")
c<-list.files(pattern = "42")
file.remove(c)
DownGSE("GSE42872")
load("GSE42872_gset.RData")
eset<-gset[[1]]
eset
eset<-assayData(eset)
eset
eset<-gset[[1]]
eset<-exprs(eset)
eset
pdata<-pData(eset)
pdata<-pData(gset[[1]])
pdata
phenoData(gset[[1]])
featureData(gset[[1]])
setwd("Github/wdRgithub.io/R)
setwd("Github/wdRgithub.io/R")
